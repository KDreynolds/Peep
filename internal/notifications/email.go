package notifications

import (
	"fmt"
	"net/smtp"
	"strings"
	"time"
)

type EmailConfig struct {
	SMTPHost  string
	SMTPPort  int
	Username  string
	Password  string
	FromEmail string
	FromName  string
	ToEmails  []string
	UseTLS    bool
}

type EmailNotification struct {
	config EmailConfig
}

func NewEmailNotification(config EmailConfig) *EmailNotification {
	return &EmailNotification{
		config: config,
	}
}

func (e *EmailNotification) Send(title, message string, severity string) error {
	if len(e.config.ToEmails) == 0 {
		return fmt.Errorf("no recipient emails configured")
	}

	// Create email content
	subject := fmt.Sprintf("[Peep Alert - %s] %s", strings.ToUpper(severity), title)
	body := e.formatEmailBody(title, message, severity)

	// Create MIME email
	email := e.createMIMEEmail(subject, body)

	// Send email
	return e.sendSMTP(email)
}

func (e *EmailNotification) formatEmailBody(title, message, severity string) string {
	timestamp := time.Now().Format("2006-01-02 15:04:05 MST")

	// Create HTML email body
	html := fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Peep Alert</title>
</head>
<body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <!-- Header -->
        <div style="background-color: %s; color: white; padding: 20px; text-align: center;">
            <h1 style="margin: 0; font-size: 24px;">üîç Peep Alert</h1>
            <p style="margin: 5px 0 0 0; font-size: 14px; opacity: 0.9;">Observability for humans</p>
        </div>
        
        <!-- Alert Badge -->
        <div style="padding: 20px; text-align: center; border-bottom: 1px solid #eee;">
            <div style="display: inline-block; background-color: %s; color: white; padding: 8px 16px; border-radius: 20px; font-weight: bold; font-size: 14px;">
                %s ALERT
            </div>
        </div>
        
        <!-- Content -->
        <div style="padding: 20px;">
            <h2 style="margin: 0 0 15px 0; color: #333; font-size: 20px;">%s</h2>
            <div style="background-color: #f8f9fa; border-left: 4px solid %s; padding: 15px; border-radius: 0 4px 4px 0; margin: 15px 0;">
                <pre style="margin: 0; font-family: 'Courier New', monospace; font-size: 13px; white-space: pre-wrap; word-wrap: break-word;">%s</pre>
            </div>
        </div>
        
        <!-- Footer -->
        <div style="background-color: #f8f9fa; padding: 15px 20px; border-top: 1px solid #eee; font-size: 12px; color: #666;">
            <p style="margin: 0;"><strong>Time:</strong> %s</p>
            <p style="margin: 5px 0 0 0;"><em>Generated by Peep - One binary. No boilerplate. No YAML cults.</em></p>
        </div>
    </div>
</body>
</html>`,
		e.getSeverityHeaderColor(severity),
		e.getSeverityColor(severity),
		strings.ToUpper(severity),
		title,
		e.getSeverityColor(severity),
		message,
		timestamp,
	)

	return html
}

func (e *EmailNotification) getSeverityColor(severity string) string {
	switch strings.ToLower(severity) {
	case "critical":
		return "#dc3545" // Red
	case "warning":
		return "#fd7e14" // Orange
	case "info":
		return "#0dcaf0" // Cyan
	default:
		return "#6c757d" // Gray
	}
}

func (e *EmailNotification) getSeverityHeaderColor(severity string) string {
	switch strings.ToLower(severity) {
	case "critical":
		return "#a71e2a" // Darker red
	case "warning":
		return "#cc5500" // Darker orange
	case "info":
		return "#0aa2c0" // Darker cyan
	default:
		return "#495057" // Darker gray
	}
}

func (e *EmailNotification) createMIMEEmail(subject, htmlBody string) string {
	fromHeader := e.config.FromEmail
	if e.config.FromName != "" {
		fromHeader = fmt.Sprintf("%s <%s>", e.config.FromName, e.config.FromEmail)
	}

	headers := make(map[string]string)
	headers["From"] = fromHeader
	headers["To"] = strings.Join(e.config.ToEmails, ", ")
	headers["Subject"] = subject
	headers["MIME-Version"] = "1.0"
	headers["Content-Type"] = "text/html; charset=UTF-8"
	headers["Date"] = time.Now().Format(time.RFC1123Z)

	var email strings.Builder
	for key, value := range headers {
		email.WriteString(fmt.Sprintf("%s: %s\r\n", key, value))
	}
	email.WriteString("\r\n")
	email.WriteString(htmlBody)

	return email.String()
}

func (e *EmailNotification) sendSMTP(email string) error {
	// Connect to SMTP server
	addr := fmt.Sprintf("%s:%d", e.config.SMTPHost, e.config.SMTPPort)

	// Authenticate
	auth := smtp.PlainAuth("", e.config.Username, e.config.Password, e.config.SMTPHost)

	// Send email
	err := smtp.SendMail(
		addr,
		auth,
		e.config.FromEmail,
		e.config.ToEmails,
		[]byte(email),
	)

	if err != nil {
		return fmt.Errorf("failed to send email: %w", err)
	}

	return nil
}

// ValidateConfig checks if the email configuration is valid
func (e *EmailNotification) ValidateConfig() error {
	if e.config.SMTPHost == "" {
		return fmt.Errorf("SMTP host is required")
	}

	if e.config.SMTPPort == 0 {
		return fmt.Errorf("SMTP port is required")
	}

	if e.config.Username == "" {
		return fmt.Errorf("SMTP username is required")
	}

	if e.config.Password == "" {
		return fmt.Errorf("SMTP password is required")
	}

	if e.config.FromEmail == "" {
		return fmt.Errorf("from email is required")
	}

	if len(e.config.ToEmails) == 0 {
		return fmt.Errorf("at least one recipient email is required")
	}

	return nil
}

// TestConnection sends a test email to verify the configuration
func (e *EmailNotification) TestConnection() error {
	if err := e.ValidateConfig(); err != nil {
		return err
	}

	return e.Send(
		"Peep Email Test",
		"This is a test email from Peep to verify your email notification configuration is working correctly.\n\nIf you received this message, your email notifications are properly configured!",
		"info",
	)
}
